# 1
asyncWrapper uses a separate thread to handle the writes.
The calls return immediately and the caller can continue its work
and the log gets written later.
To avoid writing a try/catch block for each controller function, 
and also use next to pass middleware to the next function.

# 2
const getTask = asyncWrapper(async (req, res, next) => {
  const { id: taskID } = req.params;
  const task = await Task.findOne({ _id: taskID });
  if (!task) {
    return next(createCustomError (`No task with id: ${taskID}`, 404))
  }
  res.status(200).json({ task });
});